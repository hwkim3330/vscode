#!/bin/bash

# KETI Code - Portable Edition
# Works on Ubuntu 18.04+ without any dependencies

set -e

# Detect architecture
ARCH=$(uname -m)
NODE_VERSION="v16.20.2"

# Node.js download URLs for different architectures
declare -A NODE_URLS=(
    ["x86_64"]="https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.xz"
    ["aarch64"]="https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-arm64.tar.xz"
    ["armv7l"]="https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-armv7l.tar.xz"
)

# Portable Node.js location
PORTABLE_DIR="$HOME/.keti-code-runtime"
NODE_DIR="$PORTABLE_DIR/node"
NODE_BIN="$NODE_DIR/bin/node"

# Check if we have portable Node.js
if [ ! -f "$NODE_BIN" ]; then
    echo "ðŸ“¦ First time setup - downloading portable Node.js..."
    mkdir -p "$PORTABLE_DIR"

    # Get download URL for architecture
    NODE_URL="${NODE_URLS[$ARCH]}"
    if [ -z "$NODE_URL" ]; then
        echo "Unsupported architecture: $ARCH"
        exit 1
    fi

    # Download and extract
    echo "Downloading from $NODE_URL..."
    curl -sL "$NODE_URL" | tar xJ -C "$PORTABLE_DIR"
    mv "$PORTABLE_DIR"/node-* "$NODE_DIR"

    echo "âœ… Node.js installed to $NODE_DIR"
fi

# Create temp directory for app
TMPDIR=$(mktemp -d -t keti-code-XXXXXX)
trap "rm -rf $TMPDIR" EXIT

# Extract embedded files
echo "Extracting application..."

cat << 'ENDOFAPP' | base64 -d > "$TMPDIR/keti-code.js"
IyEvdXNyL2Jpbi9lbnYgbm9kZQoKLyoqCiAqIEtFVEkgQ29kZSAtIFplcm8gRGVwZW5kZW5jeSBBSSBDb2RlIEVkaXRvcgogKiBXb3JrcyBvbiBVYnVudHUgMTguMDQrIHdpdGggT05MWSBOb2RlLmpzIGJ1aWx0LWluIG1vZHVsZXMKICovCgpjb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpOwpjb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7CmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTsKY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTsKY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7CmNvbnN0IHsgc3Bhd24sIGV4ZWMgfSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTsKY29uc3QgcmVhZGxpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpOwpjb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7CmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpOwoKLy8gQ29uZmlndXJhdGlvbgpjb25zdCBDT05GSUcgPSB7CiAgICBwb3J0OiBwcm9jZXNzLmVudi5LRVRJX1BPUlQgfHwgMzMzMywKICAgIGhvc3Q6ICcxMjcuMC4wLjEnLAogICAgYXBpS2V5OiBwcm9jZXNzLmVudi5LRVRJX0FQSV9LRVkgfHwgJycsCiAgICBhaVByb3ZpZGVyOiBwcm9jZXNzLmVudi5LRVRJX0FJX1BST1ZJREVSIHx8ICdjbGF1ZGUnLAogICAgaG9tZURpcjogcGF0aC5qb2luKG9zLmhvbWVkaXIoKSwgJy5rZXRpLWNvZGUnKSwKICAgIHdvcmtEaXI6IHByb2Nlc3MuY3dkKCkKfTsKCi8vIFRlcm1pbmFsIHNlc3Npb25zCmNvbnN0IHRlcm1pbmFscyA9IG5ldyBNYXAoKTsKbGV0IHRlcm1pbmFsSWRDb3VudGVyID0gMDsKCi8vIFdlYlNvY2tldCBjb25uZWN0aW9ucyAoaW1wbGVtZW50ZWQgZnJvbSBzY3JhdGNoKQpjb25zdCB3c0Nvbm5lY3Rpb25zID0gbmV3IE1hcCgpOwoKLyoqCiAqIFNpbXBsZSBXZWJTb2NrZXQgaW1wbGVtZW50YXRpb24gKG5vIGRlcGVuZGVuY2llcykKICovCmNsYXNzIFNpbXBsZVdlYlNvY2tldCB7CiAgICBjb25zdHJ1Y3RvcihyZXF1ZXN0LCBzb2NrZXQpIHsKICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDsKICAgICAgICB0aGlzLnN0YXRlID0gJ0NPTk5FQ1RJTkcnOwoKICAgICAgICAvLyBHZW5lcmF0ZSBhY2NlcHQga2V5CiAgICAgICAgY29uc3Qga2V5ID0gcmVxdWVzdC5oZWFkZXJzWydzZWMtd2Vic29ja2V0LWtleSddOwogICAgICAgIGNvbnN0IGFjY2VwdEtleSA9IHRoaXMuZ2VuZXJhdGVBY2NlcHRLZXkoa2V5KTsKCiAgICAgICAgLy8gU2VuZCBoYW5kc2hha2UKICAgICAgICBzb2NrZXQud3JpdGUoCiAgICAgICAgICAgICdIVFRQLzEuMSAxMDEgU3dpdGNoaW5nIFByb3RvY29sc1xyXG4nICsKICAgICAgICAgICAgJ1VwZ3JhZGU6IHdlYnNvY2tldFxyXG4nICsKICAgICAgICAgICAgJ0Nvbm5lY3Rpb246IFVwZ3JhZGVcclxuJyArCiAgICAgICAgICAgIGBTZWMtV2ViU29ja2V0LUFjY2VwdDogJHthY2NlcHRLZXl9XHJcbmAgKwogICAgICAgICAgICAnXHJcbicKICAgICAgICApOwoKICAgICAgICB0aGlzLnN0YXRlID0gJ09QRU4nOwoKICAgICAgICAvLyBIYW5kbGUgaW5jb21pbmcgZnJhbWVzCiAgICAgICAgc29ja2V0Lm9uKCdkYXRhJywgKGJ1ZmZlcikgPT4gewogICAgICAgICAgICB0aGlzLnBhcnNlRnJhbWUoYnVmZmVyKTsKICAgICAgICB9KTsKCiAgICAgICAgc29ja2V0Lm9uKCdjbG9zZScsICgpID0+IHsKICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICdDTE9TRUQnOwogICAgICAgIH0pOwogICAgfQoKICAgIGdlbmVyYXRlQWNjZXB0S2V5KGtleSkgewogICAgICAgIGNvbnN0IG1hZ2ljID0gJzI1OEVBRkE1LUU5MTQtNDdEQS05NUNBLUM1QUIwREM4NUIxMSc7CiAgICAgICAgcmV0dXJuIGNyeXB0bwogICAgICAgICAgICAuY3JlYXRlSGFzaCgnc2hhMScpCiAgICAgICAgICAgIC51cGRhdGUoa2V5ICsgbWFnaWMpCiAgICAgICAgICAgIC5kaWdlc3QoJ2Jhc2U2NCcpOwogICAgfQoKICAgIHBhcnNlRnJhbWUoYnVmZmVyKSB7CiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPCAyKSByZXR1cm47CgogICAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICAgIGNvbnN0IGZpcnN0Qnl0ZSA9IGJ1ZmZlcltvZmZzZXQrK107CiAgICAgICAgY29uc3QgZmluID0gISEoZmlyc3RCeXRlICYgMHg4MCk7CiAgICAgICAgY29uc3Qgb3Bjb2RlID0gZmlyc3RCeXRlICYgMHgwZjsKCiAgICAgICAgY29uc3Qgc2Vjb25kQnl0ZSA9IGJ1ZmZlcltvZmZzZXQrK107CiAgICAgICAgY29uc3QgbWFza2VkID0gISEoc2Vjb25kQnl0ZSAmIDB4ODApOwogICAgICAgIGxldCBwYXlsb2FkTGVuZ3RoID0gc2Vjb25kQnl0ZSAmIDB4N2Y7CgogICAgICAgIGlmIChwYXlsb2FkTGVuZ3RoID09PSAxMjYpIHsKICAgICAgICAgICAgcGF5bG9hZExlbmd0aCA9IGJ1ZmZlci5yZWFkVUludDE2QkUob2Zmc2V0KTsKICAgICAgICAgICAgb2Zmc2V0ICs9IDI7CiAgICAgICAgfSBlbHNlIGlmIChwYXlsb2FkTGVuZ3RoID09PSAxMjcpIHsKICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7IC8vIFNraXAgaGlnaCAzMiBiaXRzCiAgICAgICAgICAgIHBheWxvYWRMZW5ndGggPSBidWZmZXIucmVhZFVJbnQzMkJFKG9mZnNldCk7CiAgICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgIH0KCiAgICAgICAgbGV0IG1hc2tLZXk7CiAgICAgICAgaWYgKG1hc2tlZCkgewogICAgICAgICAgICBtYXNrS2V5ID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgNCk7CiAgICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgIH0KCiAgICAgICAgY29uc3QgcGF5bG9hZCA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHBheWxvYWRMZW5ndGgpOwoKICAgICAgICBpZiAobWFza2VkKSB7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF5bG9hZC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcGF5bG9hZFtpXSBePSBtYXNrS2V5W2kgJSA0XTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKG9wY29kZSA9PT0gMHgxKSB7IC8vIFRleHQgZnJhbWUKICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHBheWxvYWQudG9TdHJpbmcoJ3V0ZjgnKTsKICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2UobWVzc2FnZSk7CiAgICAgICAgfSBlbHNlIGlmIChvcGNvZGUgPT09IDB4OCkgeyAvLyBDbG9zZSBmcmFtZQogICAgICAgICAgICB0aGlzLmNsb3NlKCk7CiAgICAgICAgfQogICAgfQoKICAgIHNlbmQoZGF0YSkgewogICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSAnT1BFTicpIHJldHVybjsKCiAgICAgICAgY29uc3QgbWVzc2FnZSA9IEJ1ZmZlci5mcm9tKGRhdGEsICd1dGY4Jyk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gbWVzc2FnZS5sZW5ndGg7CgogICAgICAgIGxldCBmcmFtZTsKICAgICAgICBpZiAobGVuZ3RoIDwgMTI2KSB7CiAgICAgICAgICAgIGZyYW1lID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIpOwogICAgICAgICAgICBmcmFtZVswXSA9IDB4ODE7IC8vIEZJTj0xLCBvcGNvZGU9MSAodGV4dCkKICAgICAgICAgICAgZnJhbWVbMV0gPSBsZW5ndGg7CiAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPCA2NTUzNikgewogICAgICAgICAgICBmcmFtZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0KTsKICAgICAgICAgICAgZnJhbWVbMF0gPSAweDgxOwogICAgICAgICAgICBmcmFtZVsxXSA9IDEyNjsKICAgICAgICAgICAgZnJhbWUud3JpdGVVSW50MTZCRShsZW5ndGgsIDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZyYW1lID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEwKTsKICAgICAgICAgICAgZnJhbWVbMF0gPSAweDgxOwogICAgICAgICAgICBmcmFtZVsxXSA9IDEyNzsKICAgICAgICAgICAgZnJhbWUud3JpdGVVSW50MzJCRSgwLCAyKTsKICAgICAgICAgICAgZnJhbWUud3JpdGVVSW50MzJCRShsZW5ndGgsIDYpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUoQnVmZmVyLmNvbmNhdChbZnJhbWUsIG1lc3NhZ2VdKSk7CiAgICB9CgogICAgY2xvc2UoKSB7CiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09ICdDTE9TRUQnKSByZXR1cm47CiAgICAgICAgdGhpcy5zdGF0ZSA9ICdDTE9TRUQnOwogICAgICAgIGNvbnN0IGNsb3NlRnJhbWUgPSBCdWZmZXIuZnJvbShbMHg4OCwgMHgwMF0pOwogICAgICAgIHRoaXMuc29ja2V0LndyaXRlKGNsb3NlRnJhbWUpOwogICAgICAgIHRoaXMuc29ja2V0LmVuZCgpOwogICAgfQoKICAgIG9uTWVzc2FnZShtZXNzYWdlKSB7CiAgICAgICAgLy8gT3ZlcnJpZGUgdGhpcwogICAgfQp9CgovKioKICogVGVybWluYWwgTWFuYWdlcgogKi8KY2xhc3MgVGVybWluYWwgewogICAgY29uc3RydWN0b3IoaWQpIHsKICAgICAgICB0aGlzLmlkID0gaWQ7CiAgICAgICAgdGhpcy5wcm9jZXNzID0gbnVsbDsKICAgICAgICB0aGlzLm91dHB1dCA9IFtdOwogICAgICAgIHRoaXMuY3dkID0gQ09ORklHLndvcmtEaXI7CiAgICB9CgogICAgc3RhcnQoKSB7CiAgICAgICAgY29uc3Qgc2hlbGwgPSBwcm9jZXNzLmVudi5TSEVMTCB8fCAnL2Jpbi9iYXNoJzsKICAgICAgICB0aGlzLnByb2Nlc3MgPSBzcGF3bihzaGVsbCwgW10sIHsKICAgICAgICAgICAgY3dkOiB0aGlzLmN3ZCwKICAgICAgICAgICAgZW52OiB7IC4uLnByb2Nlc3MuZW52LCBURVJNOiAneHRlcm0tMjU2Y29sb3InIH0sCiAgICAgICAgICAgIHNoZWxsOiBmYWxzZQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLnByb2Nlc3Muc3Rkb3V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHsKICAgICAgICAgICAgdGhpcy5icm9hZGNhc3QoewogICAgICAgICAgICAgICAgdHlwZTogJ291dHB1dCcsCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLnRvU3RyaW5nKCkKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMucHJvY2Vzcy5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YSkgPT4gewogICAgICAgICAgICB0aGlzLmJyb2FkY2FzdCh7CiAgICAgICAgICAgICAgICB0eXBlOiAnb3V0cHV0JywKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEudG9TdHJpbmcoKQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5wcm9jZXNzLm9uKCdleGl0JywgKGNvZGUpID0+IHsKICAgICAgICAgICAgdGhpcy5icm9hZGNhc3QoewogICAgICAgICAgICAgICAgdHlwZTogJ2V4aXQnLAogICAgICAgICAgICAgICAgY29kZTogY29kZQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0KCiAgICB3cml0ZShkYXRhKSB7CiAgICAgICAgaWYgKHRoaXMucHJvY2VzcykgewogICAgICAgICAgICB0aGlzLnByb2Nlc3Muc3RkaW4ud3JpdGUoZGF0YSk7CiAgICAgICAgfQogICAgfQoKICAgIHJlc2l6ZShjb2xzLCByb3dzKSB7CiAgICAgICAgLy8gVHJ5IHRvIHJlc2l6ZSAobWF5IG5vdCB3b3JrIHdpdGhvdXQgbm9kZS1wdHkpCiAgICAgICAgaWYgKHRoaXMucHJvY2VzcykgewogICAgICAgICAgICB0aGlzLnByb2Nlc3Mua2lsbCgnU0lHV0lOQ0gnKTsKICAgICAgICB9CiAgICB9CgogICAgYnJvYWRjYXN0KG1lc3NhZ2UpIHsKICAgICAgICBjb25zdCBjb25uZWN0aW9ucyA9IHdzQ29ubmVjdGlvbnMuZ2V0KHRoaXMuaWQpIHx8IFtdOwogICAgICAgIGNvbm5lY3Rpb25zLmZvckVhY2god3MgPT4gewogICAgICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTsKICAgICAgICB9KTsKICAgIH0KCiAgICBkZXN0cm95KCkgewogICAgICAgIGlmICh0aGlzLnByb2Nlc3MpIHsKICAgICAgICAgICAgdGhpcy5wcm9jZXNzLmtpbGwoKTsKICAgICAgICB9CiAgICB9Cn0KCi8qKgogKiBBSSBJbnRlZ3JhdGlvbiAodXNpbmcgb25seSBodHRwcyBtb2R1bGUpCiAqLwpjbGFzcyBBSUNsaWVudCB7CiAgICBhc3luYyBjb21wbGV0ZShwcm9tcHQpIHsKICAgICAgICBpZiAoIUNPTkZJRy5hcGlLZXkpIHsKICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6ICdObyBBUEkga2V5IGNvbmZpZ3VyZWQnIH07CiAgICAgICAgfQoKICAgICAgICBjb25zdCBwcm92aWRlcnMgPSB7CiAgICAgICAgICAgIGNsYXVkZTogewogICAgICAgICAgICAgICAgaG9zdG5hbWU6ICdhcGkuYW50aHJvcGljLmNvbScsCiAgICAgICAgICAgICAgICBwYXRoOiAnL3YxL21lc3NhZ2VzJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnYW50aHJvcGljLXZlcnNpb24nOiAnMjAyMy0wNi0wMScsCiAgICAgICAgICAgICAgICAgICAgJ3gtYXBpLWtleSc6IENPTkZJRy5hcGlLZXkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgbW9kZWw6ICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknLAogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHByb21wdCB9XSwKICAgICAgICAgICAgICAgICAgICBtYXhfdG9rZW5zOiAxMDAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wZW5haTogewogICAgICAgICAgICAgICAgaG9zdG5hbWU6ICdhcGkub3BlbmFpLmNvbScsCiAgICAgICAgICAgICAgICBwYXRoOiAnL3YxL2NoYXQvY29tcGxldGlvbnMnLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke0NPTkZJRy5hcGlLZXl9YAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBtb2RlbDogJ2dwdC00JywKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW3sgcm9sZTogJ3VzZXInLCBjb250ZW50OiBwcm9tcHQgfV0sCiAgICAgICAgICAgICAgICAgICAgbWF4X3Rva2VuczogMTAwMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBwcm92aWRlcnNbQ09ORklHLmFpUHJvdmlkZXJdOwogICAgICAgIGlmICghcHJvdmlkZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6ICdVbmtub3duIEFJIHByb3ZpZGVyJyB9OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHByb3ZpZGVyLmJvZHkpOwoKICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgIGhvc3RuYW1lOiBwcm92aWRlci5ob3N0bmFtZSwKICAgICAgICAgICAgICAgIHBvcnQ6IDQ0MywKICAgICAgICAgICAgICAgIHBhdGg6IHByb3ZpZGVyLnBhdGgsCiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGRhdGEubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIC4uLnByb3ZpZGVyLmhlYWRlcnMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucywgKHJlcykgPT4gewogICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9ICcnOwoKICAgICAgICAgICAgICAgIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4gewogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRGF0YSArPSBjaHVuazsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UocmVzcG9uc2VEYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID09PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBDT05GSUcuYWlQcm92aWRlciA9PT0gJ2NsYXVkZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlZC5jb250ZW50Py5bMF0/LnRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHBhcnNlZC5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgY29udGVudCB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBlcnJvcjogcGFyc2VkLmVycm9yPy5tZXNzYWdlIHx8ICdBUEkgZXJyb3InIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBlcnJvcjogJ0ZhaWxlZCB0byBwYXJzZSByZXNwb25zZScgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnIpID0+IHsKICAgICAgICAgICAgICAgIHJlc29sdmUoeyBlcnJvcjogZXJyLm1lc3NhZ2UgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmVxLndyaXRlKGRhdGEpOwogICAgICAgICAgICByZXEuZW5kKCk7CiAgICAgICAgfSk7CiAgICB9Cn0KCmNvbnN0IGFpQ2xpZW50ID0gbmV3IEFJQ2xpZW50KCk7CgovKioKICogU3RhdGljIGZpbGUgc2VydmVyCiAqLwpmdW5jdGlvbiBzZXJ2ZVN0YXRpYyhmaWxlUGF0aCwgcmVzKSB7CiAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZVBhdGgpOwogICAgY29uc3QgY29udGVudFR5cGVzID0gewogICAgICAgICcuaHRtbCc6ICd0ZXh0L2h0bWwnLAogICAgICAgICcuanMnOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcsCiAgICAgICAgJy5jc3MnOiAndGV4dC9jc3MnLAogICAgICAgICcuanNvbic6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgfTsKCiAgICBmcy5yZWFkRmlsZShmaWxlUGF0aCwgKGVyciwgY29udGVudCkgPT4gewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmVzLndyaXRlSGVhZCg0MDQpOwogICAgICAgICAgICByZXMuZW5kKCdOb3QgZm91bmQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXMud3JpdGVIZWFkKDIwMCwgeyAnQ29udGVudC1UeXBlJzogY29udGVudFR5cGVzW2V4dF0gfHwgJ3RleHQvcGxhaW4nIH0pOwogICAgICAgICAgICByZXMuZW5kKGNvbnRlbnQpOwogICAgICAgIH0KICAgIH0pOwp9CgovKioKICogSFRUUCBTZXJ2ZXIKICovCmNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKChyZXEsIHJlcykgPT4gewogICAgY29uc3QgcGFyc2VkVXJsID0gdXJsLnBhcnNlKHJlcS51cmwsIHRydWUpOwogICAgY29uc3QgcGF0aG5hbWUgPSBwYXJzZWRVcmwucGF0aG5hbWU7CgogICAgLy8gQVBJIGVuZHBvaW50cwogICAgaWYgKHBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9hcGkvJykpIHsKICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpOwoKICAgICAgICBpZiAocGF0aG5hbWUgPT09ICcvYXBpL3Rlcm1pbmFsL2NyZWF0ZScgJiYgcmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7CiAgICAgICAgICAgIGNvbnN0IGlkID0gdGVybWluYWxJZENvdW50ZXIrKzsKICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBuZXcgVGVybWluYWwoaWQpOwogICAgICAgICAgICB0ZXJtaW5hbC5zdGFydCgpOwogICAgICAgICAgICB0ZXJtaW5hbHMuc2V0KGlkLCB0ZXJtaW5hbCk7CgogICAgICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgaWQgfSkpOwoKICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9haS9jb21wbGV0ZScgJiYgcmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7CiAgICAgICAgICAgIGxldCBib2R5ID0gJyc7CiAgICAgICAgICAgIHJlcS5vbignZGF0YScsIGNodW5rID0+IGJvZHkgKz0gY2h1bmspOwogICAgICAgICAgICByZXEub24oJ2VuZCcsIGFzeW5jICgpID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvbXB0IH0gPSBKU09OLnBhcnNlKGJvZHkpOwogICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWlDbGllbnQuY29tcGxldGUocHJvbXB0KTsKICAgICAgICAgICAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9maWxlcycgJiYgcmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHsKICAgICAgICAgICAgY29uc3QgZGlyID0gcGFyc2VkVXJsLnF1ZXJ5LmRpciB8fCBDT05GSUcud29ya0RpcjsKICAgICAgICAgICAgZnMucmVhZGRpcihkaXIsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9LCAoZXJyLCBmaWxlcykgPT4gewogICAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogZXJyLm1lc3NhZ2UgfSkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IGZpbGVzLm1hcChmID0+ICh7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGYubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZi5pc0RpcmVjdG9yeSgpID8gJ2RpcicgOiAnZmlsZScsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGguam9pbihkaXIsIGYubmFtZSkKICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeShpdGVtcykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hcGkvZmlsZScgJiYgcmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHsKICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBwYXJzZWRVcmwucXVlcnkucGF0aDsKICAgICAgICAgICAgZnMucmVhZEZpbGUoZmlsZVBhdGgsICd1dGY4JywgKGVyciwgY29udGVudCkgPT4gewogICAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogZXJyLm1lc3NhZ2UgfSkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgY29udGVudCB9KSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lID09PSAnL2FwaS9maWxlJyAmJiByZXEubWV0aG9kID09PSAnUE9TVCcpIHsKICAgICAgICAgICAgbGV0IGJvZHkgPSAnJzsKICAgICAgICAgICAgcmVxLm9uKCdkYXRhJywgY2h1bmsgPT4gYm9keSArPSBjaHVuayk7CiAgICAgICAgICAgIHJlcS5vbignZW5kJywgKCkgPT4gewogICAgICAgICAgICAgICAgY29uc3QgeyBwYXRoOiBmaWxlUGF0aCwgY29udGVudCB9ID0gSlNPTi5wYXJzZShib2R5KTsKICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZShmaWxlUGF0aCwgY29udGVudCwgKGVycikgPT4gewogICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IGVycm9yOiBlcnIubWVzc2FnZSB9KSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IHN1Y2Nlc3M6IHRydWUgfSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzLndyaXRlSGVhZCg0MDQpOwogICAgICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6ICdOb3QgZm91bmQnIH0pKTsKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIC8vIFNlcnZlIHN0YXRpYyBmaWxlcwogICAgICAgIGxldCBmaWxlUGF0aCA9IHBhdGhuYW1lID09PSAnLycgPyAnL2luZGV4Lmh0bWwnIDogcGF0aG5hbWU7CiAgICAgICAgZmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBmaWxlUGF0aCk7CiAgICAgICAgc2VydmVTdGF0aWMoZmlsZVBhdGgsIHJlcyk7CiAgICB9Cn0pOwoKLy8gV2ViU29ja2V0IHVwZ3JhZGUKc2VydmVyLm9uKCd1cGdyYWRlJywgKHJlcXVlc3QsIHNvY2tldCwgaGVhZCkgPT4gewogICAgY29uc3QgcGF0aG5hbWUgPSB1cmwucGFyc2UocmVxdWVzdC51cmwpLnBhdGhuYW1lOwoKICAgIGlmIChwYXRobmFtZS5zdGFydHNXaXRoKCcvd3MvdGVybWluYWwvJykpIHsKICAgICAgICBjb25zdCB0ZXJtaW5hbElkID0gcGFyc2VJbnQocGF0aG5hbWUuc3BsaXQoJy8nKS5wb3AoKSk7CiAgICAgICAgY29uc3Qgd3MgPSBuZXcgU2ltcGxlV2ViU29ja2V0KHJlcXVlc3QsIHNvY2tldCk7CgogICAgICAgIC8vIFN0b3JlIGNvbm5lY3Rpb24KICAgICAgICBpZiAoIXdzQ29ubmVjdGlvbnMuaGFzKHRlcm1pbmFsSWQpKSB7CiAgICAgICAgICAgIHdzQ29ubmVjdGlvbnMuc2V0KHRlcm1pbmFsSWQsIFtdKTsKICAgICAgICB9CiAgICAgICAgd3NDb25uZWN0aW9ucy5nZXQodGVybWluYWxJZCkucHVzaCh3cyk7CgogICAgICAgIC8vIEhhbmRsZSBtZXNzYWdlcwogICAgICAgIHdzLm9uTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gdGVybWluYWxzLmdldCh0ZXJtaW5hbElkKTsKCiAgICAgICAgICAgICAgICBpZiAodGVybWluYWwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnaW5wdXQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLndyaXRlKGRhdGEuZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdyZXNpemUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLnJlc2l6ZShkYXRhLmNvbHMsIGRhdGEucm93cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dlYlNvY2tldCBlcnJvcjonLCBlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgc29ja2V0Lm9uKCdjbG9zZScsICgpID0+IHsKICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbnMgPSB3c0Nvbm5lY3Rpb25zLmdldCh0ZXJtaW5hbElkKTsKICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25zKSB7CiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNvbm5lY3Rpb25zLmluZGV4T2Yod3MpOwogICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KfSk7CgovLyBTdGFydCBzZXJ2ZXIKc2VydmVyLmxpc3RlbihDT05GSUcucG9ydCwgQ09ORklHLmhvc3QsICgpID0+IHsKICAgIGNvbnNvbGUubG9nKGAK4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXCuKVkSAgICAgICAgS0VUSSBDb2RlIC0gQUkgRWRpdG9yICAgICAgICAgICDilZEK4pWRICAgICAgICBaZXJvIERlcGVuZGVuY2llcyBFZGl0aW9uICAgICAgICDilZEK4pWg4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWjCuKVkSAgVVJMOiBodHRwOi8vJHtDT05GSUcuaG9zdH06JHtDT05GSUcucG9ydH0gICAgICAgICDilZEK4pWRICBBSTogICR7Q09ORklHLmFpUHJvdmlkZXIucGFkRW5kKDMzKX3ilZEK4pWRICBEaXI6ICR7Q09ORklHLndvcmtEaXIuc3Vic3RyaW5nKDAsIDMzKS5wYWRFbmQoMzMpfeKVkQrilZrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZ0KClByZXNzIEN0cmwrQyB0byBzdG9wCmApOwoKICAgIC8vIEF1dG8tb3BlbiBicm93c2VyCiAgICBjb25zdCBvcGVuQ29tbWFuZHMgPSB7CiAgICAgICAgbGludXg6ICd4ZGctb3BlbicsCiAgICAgICAgZGFyd2luOiAnb3BlbicsCiAgICAgICAgd2luMzI6ICdzdGFydCcKICAgIH07CgogICAgY29uc3QgY21kID0gb3BlbkNvbW1hbmRzW3Byb2Nlc3MucGxhdGZvcm1dOwogICAgaWYgKGNtZCkgewogICAgICAgIGV4ZWMoYCR7Y21kfSBodHRwOi8vJHtDT05GSUcuaG9zdH06JHtDT05GSUcucG9ydH1gLCAoZXJyKSA9PiB7CiAgICAgICAgICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgYXV0by1vcGVuIGJyb3dzZXInKTsKICAgICAgICB9KTsKICAgIH0KfSk7CgovLyBDbGVhbnVwIG9uIGV4aXQKcHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4gewogICAgY29uc29sZS5sb2coJ1xuU2h1dHRpbmcgZG93bi4uLicpOwogICAgdGVybWluYWxzLmZvckVhY2godGVybSA9PiB0ZXJtLmRlc3Ryb3koKSk7CiAgICBwcm9jZXNzLmV4aXQoMCk7Cn0pOw==
ENDOFAPP

cat << 'ENDOFHTML' | base64 -d > "$TMPDIR/index.html"
PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICAgIDx0aXRsZT5LRVRJIENvZGUgLSBBSSBDb2RlIEVkaXRvcjwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAgICAgKiB7IG1hcmdpbjogMDsgcGFkZGluZzogMDsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfQoKICAgICAgICBib2R5IHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdNb25hY28nLCAnTWVubG8nLCAnVWJ1bnR1IE1vbm8nLCBtb25vc3BhY2U7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMxZTFlMWU7CiAgICAgICAgICAgIGNvbG9yOiAjZDRkNGQ0OwogICAgICAgICAgICBoZWlnaHQ6IDEwMHZoOwogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgIH0KCiAgICAgICAgI2hlYWRlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMyZDJkMzA7CiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAxNnB4OwogICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzNlM2U0MjsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgICAgIH0KCiAgICAgICAgI2xvZ28gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgY29sb3I6ICMwMDdhY2M7CiAgICAgICAgfQoKICAgICAgICAjbWFpbiB7CiAgICAgICAgICAgIGZsZXg6IDE7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAgICAgfQoKICAgICAgICAjc2lkZWJhciB7CiAgICAgICAgICAgIHdpZHRoOiAyNDBweDsKICAgICAgICAgICAgYmFja2dyb3VuZDogIzI1MjUyNjsKICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzNlM2U0MjsKICAgICAgICAgICAgb3ZlcmZsb3cteTogYXV0bzsKICAgICAgICB9CgogICAgICAgICNlZGl0b3ItYXJlYSB7CiAgICAgICAgICAgIGZsZXg6IDE7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgfQoKICAgICAgICAjdGFicyB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMyZDJkMzA7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjM2UzZTQyOwogICAgICAgIH0KCiAgICAgICAgLnRhYiB7CiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAxNnB4OwogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMmQyZDMwOwogICAgICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjM2UzZTQyOwogICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgfQoKICAgICAgICAudGFiLmFjdGl2ZSB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMxZTFlMWU7CiAgICAgICAgfQoKICAgICAgICAjZWRpdG9yIHsKICAgICAgICAgICAgZmxleDogMTsKICAgICAgICAgICAgcGFkZGluZzogMTZweDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdNb25hY28nLCAnTWVubG8nLCBtb25vc3BhY2U7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87CiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBwcmU7CiAgICAgICAgfQoKICAgICAgICAjdGVybWluYWwgewogICAgICAgICAgICBoZWlnaHQ6IDIwMHB4OwogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwOwogICAgICAgICAgICBjb2xvcjogIzBmMDsKICAgICAgICAgICAgcGFkZGluZzogOHB4OwogICAgICAgICAgICBmb250LWZhbWlseTogJ01vbmFjbycsICdNZW5sbycsIG1vbm9zcGFjZTsKICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4OwogICAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvOwogICAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzNlM2U0MjsKICAgICAgICB9CgogICAgICAgICN0ZXJtaW5hbC1pbnB1dCB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICBjb2xvcjogIzBmMDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7CiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7CiAgICAgICAgfQoKICAgICAgICAjYWktcGFuZWwgewogICAgICAgICAgICB3aWR0aDogMzAwcHg7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMyNTI1MjY7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzNlM2U0MjsKICAgICAgICAgICAgcGFkZGluZzogMTZweDsKICAgICAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgICB9CgogICAgICAgICNhaS1pbnB1dCB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBwYWRkaW5nOiA4cHg7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMzYzNjM2M7CiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMzZTNlNDI7CiAgICAgICAgICAgIGNvbG9yOiAjZDRkNGQ0OwogICAgICAgICAgICBtYXJnaW4tdG9wOiA4cHg7CiAgICAgICAgfQoKICAgICAgICAuZmlsZS1pdGVtIHsKICAgICAgICAgICAgcGFkZGluZzogNHB4IDE2cHg7CiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICB9CgogICAgICAgIC5maWxlLWl0ZW06aG92ZXIgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMmEyZDJlOwogICAgICAgIH0KCiAgICAgICAgLnRvb2xiYXItYnRuIHsKICAgICAgICAgICAgcGFkZGluZzogNHB4IDhweDsKICAgICAgICAgICAgbWFyZ2luOiAwIDRweDsKICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgICAgICAgICAgIGNvbG9yOiAjZDRkNGQ0OwogICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICB9CgogICAgICAgIC50b29sYmFyLWJ0bjpob3ZlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMzZTNlNDI7CiAgICAgICAgfQogICAgPC9zdHlsZT4KPC9oZWFkPgo8Ym9keT4KICAgIDxkaXYgaWQ9ImhlYWRlciI+CiAgICAgICAgPGRpdiBpZD0ibG9nbyI+4pqhIEtFVEkgQ29kZTwvZGl2PgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InRvb2xiYXItYnRuIiBvbmNsaWNrPSJuZXdGaWxlKCkiPvCfk4QgTmV3PC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InRvb2xiYXItYnRuIiBvbmNsaWNrPSJvcGVuRmlsZSgpIj7wn5OBIE9wZW48L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idG9vbGJhci1idG4iIG9uY2xpY2s9InNhdmVGaWxlKCkiPvCfkr4gU2F2ZTwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ0b29sYmFyLWJ0biIgb25jbGljaz0idG9nZ2xlVGVybWluYWwoKSI+8J+Wpe+4jyBUZXJtaW5hbDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ0b29sYmFyLWJ0biIgb25jbGljaz0idG9nZ2xlQUkoKSI+8J+kliBBSTwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0ibWFpbiI+CiAgICAgICAgPGRpdiBpZD0ic2lkZWJhciI+CiAgICAgICAgICAgIDxkaXYgc3R5bGU9InBhZGRpbmc6IDhweDsgZm9udC1zaXplOiAxMnB4OyBjb2xvcjogIzk2OTY5NjsiPkVYUExPUkVSPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImZpbGUtdHJlZSI+PC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgaWQ9ImVkaXRvci1hcmVhIj4KICAgICAgICAgICAgPGRpdiBpZD0idGFicyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWIgYWN0aXZlIj51bnRpdGxlZC50eHQ8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0iZWRpdG9yIiBwbGFjZWhvbGRlcj0iU3RhcnQgY29kaW5nLi4uIj48L3RleHRhcmVhPgogICAgICAgICAgICA8ZGl2IGlkPSJ0ZXJtaW5hbCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InRlcm1pbmFsLW91dHB1dCI+PC9kaXY+CiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InRlcm1pbmFsLWlucHV0IiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iJCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGlkPSJhaS1wYW5lbCI+CiAgICAgICAgICAgIDxoMyBzdHlsZT0ibWFyZ2luLWJvdHRvbTogOHB4OyI+QUkgQXNzaXN0YW50PC9oMz4KICAgICAgICAgICAgPGRpdiBpZD0iYWktY2hhdCIgc3R5bGU9ImhlaWdodDogY2FsYygxMDAlIC0gMTAwcHgpOyBvdmVyZmxvdy15OiBhdXRvOyI+PC9kaXY+CiAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0iYWktaW5wdXQiIHJvd3M9IjMiIHBsYWNlaG9sZGVyPSJBc2sgQUkuLi4iPjwvdGV4dGFyZWE+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0IHNyYz0iYXBwLmpzIj48L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+
ENDOFHTML

cat << 'ENDOFJS' | base64 -d > "$TMPDIR/app.js"

ENDOFJS

cat << 'ENDOFCSS' | base64 -d > "$TMPDIR/style.css"
LyogS0VUSSBDb2RlIC0gTWluaW1hbCBDU1MgKi8KYm9keSB7IG1hcmdpbjogMDsgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsgYmFja2dyb3VuZDogIzFlMWUxZTsgY29sb3I6ICNkNGQ0ZDQ7IH0=
ENDOFCSS

# Run with portable Node.js
cd "$TMPDIR"
echo "ðŸš€ Starting KETI Code..."
exec "$NODE_BIN" keti-code.js "$@"
